# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: '2010-09-09'
Description: Defines the subscriptions for 

Parameters:
  Stage:
    Type: String
    Default: Local
    AllowedValues:
      - Local
      - Dev
      - Prod

Resources:
  ContractStatusChangedSubscriptionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: properties.statuschanged-contract.pubevalcompleted
      Description: Constract Status Changed subscription
      EventBusName: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornContractsEventBusArn}}"
      EventPattern:
        source:
          - !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornContractsNamespace}}"
        detail-type:
          - ContractStatusChanged
      State: ENABLED
      Targets:
        - Id: SendEventTo
          Arn: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesEventBusArn}}"
          RoleArn: !GetAtt UnicornContractsEventBusToUnicornPropertiesEventBusRole.Arn

  # This IAM role allows EventBridge to assume the permissions necessary to send events 
  # from the Unicorn Contracts event bus to the Unicorn Properties event bus.
  # If the Unicorn Properties service wants receive events from other services, then add another policy 
  # the arn of the which includes the event bus arn where Unicorn Properties is creating the 
  # subscription (rule)
  UnicornContractsEventBusToUnicornPropertiesEventBusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: PutEventsOnUnicornPropertiesEventBus
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesEventBusArn}}"

  PublicationApprovalRequestedSubscriptionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: properties.pubapprovalwf-web.pubapprovalrequested
      Description: Publication evaluation completed subscription
      EventBusName: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornWebEventBusArn}}"
      EventPattern:
        source:
          - !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornWebNamespace}}"
        detail-type:
          - PublicationApprovalRequested
      State: ENABLED
      Targets:
        - Id: SendEventTo
          Arn: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesEventBusArn}}"
          RoleArn: !GetAtt UnicornWebEventBusToUnicornPropertiesEventBusRole.Arn

  # This IAM role allows EventBridge to assume the permissions necessary to send events 
  # from the Unicorn Web event bus to the Unicorn Properties event bus.
  # If the Unicorn Properties service wants receive events from other services, then add another policy 
  # the arn of the which includes the event bus arn where Unicorn Properties is creating the 
  # subscription (rule)
  UnicornWebEventBusToUnicornPropertiesEventBusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: PutEventsOnUnicornPropertiesEventBus
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesEventBusArn}}"

Outputs:
  ContractStatusChangedSubscription:
    Description: Rule ARN for blue service event 2 subscription
    Value: !GetAtt ContractStatusChangedSubscriptionRule.Arn
